//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 10.0
//

using HalconDotNet;

namespace BLTransfusion
{
//    public partial class HDevelopExport
//    {
//#if !NO_EXPORT_APP_MAIN
//        public HDevelopExport()
//        {
//            // Default settings used in HDevelop 
//            HOperatorSet.SetSystem("do_low_error", "false");
//            action();
//        }
//#endif

//        public void HDevelopStop()
//        {
//        }

//        // Main procedure 
//        private void action()
//        {

//            // Local iconic variables 

//            HObject ho_Image = null, ho_Regions = null, ho_ConnectedRegions = null;
//            HObject ho_SelectedRegions = null, ho_ImageReduced = null, ho_ImageMean = null;
//            HObject ho_RegionDynThresh = null, ho_RegionDilation = null;
//            HObject ho_SelectedRegions2 = null, ho_RegionErosion = null;


//            // Local control variables 

//            HTuple hv_WindowHandle, hv_Width = new HTuple();
//            HTuple hv_Height = new HTuple(), hv_Number = new HTuple();

//            // Initialize local and output iconic variables 
//            HOperatorSet.GenEmptyObj(out ho_Image);
//            HOperatorSet.GenEmptyObj(out ho_Regions);
//            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
//            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
//            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
//            HOperatorSet.GenEmptyObj(out ho_ImageMean);
//            HOperatorSet.GenEmptyObj(out ho_RegionDynThresh);
//            HOperatorSet.GenEmptyObj(out ho_RegionDilation);
//            HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
//            HOperatorSet.GenEmptyObj(out ho_RegionErosion);

//            try
//            {
//                // (dev_)set_check ("give_error")
//                HOperatorSet.SetWindowAttr("background_color", "black");
//                HOperatorSet.OpenWindow(0, 0, 640, 480, 0, "", "", out hv_WindowHandle);
//                HDevWindowStack.Push(hv_WindowHandle);
//                //***********************打开图片*********************************************
//                //----------------------------------------------------------------------------
//                //try
//                ho_Image.Dispose();
//                HOperatorSet.ReadImage(out ho_Image, "G:/Project/TransfusionDevice/Pic/Image_0519202522.bmp");
//                HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
//                if (HDevWindowStack.IsOpen())
//                {
//                    HOperatorSet.CloseWindow(HDevWindowStack.Pop());
//                }
//                HOperatorSet.SetWindowAttr("background_color", "black");
//                HOperatorSet.OpenWindow(0, 0, hv_Width / 2, hv_Height / 2, 0, "", "", out hv_WindowHandle);
//                HDevWindowStack.Push(hv_WindowHandle);
//                if (HDevWindowStack.IsOpen())
//                {
//                    HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
//                }
//                //catch (Exception)
//                if (HDevWindowStack.IsOpen())
//                {
//                    //dev_clear_window ()
//                }
//                //set_tposition (WindowHandle, 100, 1)
//                //write_string (WindowHandle, '               Read image failed!')
//                //endtry
//                //----------------------------------------------------------------------------

//                //***********************选择ROI**********************************************
//                //----------------------------------------------------------------------------
//                //try
//                //阈值可外部调节
//                ho_Regions.Dispose();
//                HOperatorSet.Threshold(ho_Image, out ho_Regions, 30, 255);
//                ho_ConnectedRegions.Dispose();
//                HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
//                //面积可外部调节
//                ho_SelectedRegions.Dispose();
//                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area",
//                    "and", 800, 1500000);
//                //执行填充后，获得完整区域，但，中间的黑色区域可能对下面的提取造成影响
//                //fill_up (SelectedRegions, RegionFillUp)
//                //reduce_domain (Image, RegionFillUp, ImageReduced)
//                ho_ImageReduced.Dispose();
//                HOperatorSet.ReduceDomain(ho_Image, ho_SelectedRegions, out ho_ImageReduced
//                    );
//                //catch (Exception)
//                if (HDevWindowStack.IsOpen())
//                {
//                    //dev_clear_window ()
//                }
//                //set_tposition (WindowHandle, 100, 1)
//                //write_string (WindowHandle, '               Get ROI failed!')
//                //endtry
//                //----------------------------------------------------------------------------

//                //***********************提取被测物*******************************************
//                //----------------------------------------------------------------------------
//                //try
//                //Mask宽度、高度可外部调节
//                ho_ImageMean.Dispose();
//                HOperatorSet.MeanImage(ho_ImageReduced, out ho_ImageMean, 9, 9);
//                //Offset可外部调节
//                ho_RegionDynThresh.Dispose();
//                HOperatorSet.DynThreshold(ho_ImageReduced, ho_ImageMean, out ho_RegionDynThresh,
//                    9, "dark");
//                //膨胀用结构元素半径可外部调节
//                ho_RegionDilation.Dispose();
//                HOperatorSet.DilationCircle(ho_RegionDynThresh, out ho_RegionDilation, 3.5);
//                ho_ConnectedRegions.Dispose();
//                HOperatorSet.Connection(ho_RegionDilation, out ho_ConnectedRegions);
//                //检测目标面积可外部调节
//                ho_SelectedRegions2.Dispose();
//                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions2, "area",
//                    "and", 1500, 3000);
//                //获得Region的骨架（执行时间54.994ms）
//                //skeleton (SelectedRegions2, Skeleton)
//                //使用相同的结构元素进行腐蚀，可以恢复到膨胀前的Region，而且已经是连同的Region
//                //腐蚀执行时间（14.566ms）
//                ho_RegionErosion.Dispose();
//                HOperatorSet.ErosionCircle(ho_SelectedRegions2, out ho_RegionErosion, 3.5);
//                //catch (Exception)
//                if (HDevWindowStack.IsOpen())
//                {
//                    //dev_clear_window ()
//                }
//                //set_tposition (WindowHandle, 100, 1)
//                //write_string (WindowHandle, '               Extraction failed!')
//                //endtry
//                //----------------------------------------------------------------------------

//                //***********************显示结果**********************************************
//                //----------------------------------------------------------------------------
//                //try
//                if (HDevWindowStack.IsOpen())
//                {
//                    HOperatorSet.ClearWindow(HDevWindowStack.GetActive());
//                }
//                if (HDevWindowStack.IsOpen())
//                {
//                    HOperatorSet.DispObj(ho_Image, HDevWindowStack.GetActive());
//                }
//                HOperatorSet.CountObj(ho_RegionErosion, out hv_Number);
//                HOperatorSet.SetTposition(hv_WindowHandle, 100, 1);
//                //    if (Number != 0)
//                if (HDevWindowStack.IsOpen())
//                {
//                    HOperatorSet.DispObj(ho_RegionErosion, HDevWindowStack.GetActive());
//                }
//                HOperatorSet.WriteString(hv_WindowHandle, "               不合格!");
//                HDevelopStop();
//                //    endif
//                //catch (Exception)
//                if (HDevWindowStack.IsOpen())
//                {
//                    //dev_clear_window ()
//                }
//                //set_tposition (WindowHandle, 100, 1)
//                //write_string (WindowHandle, '               Display result failed!')
//                //endtry
//                //----------------------------------------------------------------------------
//                HDevelopStop();
//            }
//            catch (HalconException HDevExpDefaultException)
//            {
//                ho_Image.Dispose();
//                ho_Regions.Dispose();
//                ho_ConnectedRegions.Dispose();
//                ho_SelectedRegions.Dispose();
//                ho_ImageReduced.Dispose();
//                ho_ImageMean.Dispose();
//                ho_RegionDynThresh.Dispose();
//                ho_RegionDilation.Dispose();
//                ho_SelectedRegions2.Dispose();
//                ho_RegionErosion.Dispose();

//                throw HDevExpDefaultException;
//            }
//            ho_Image.Dispose();
//            ho_Regions.Dispose();
//            ho_ConnectedRegions.Dispose();
//            ho_SelectedRegions.Dispose();
//            ho_ImageReduced.Dispose();
//            ho_ImageMean.Dispose();
//            ho_RegionDynThresh.Dispose();
//            ho_RegionDilation.Dispose();
//            ho_SelectedRegions2.Dispose();
//            ho_RegionErosion.Dispose();

//        }


//    }

}


